# -*- coding: utf-8 -*-
"""dsbda5SK.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EEZYkuSfxxkIQjeheP5oZlUARuYpbVJ-
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.impute import SimpleImputer
from sklearn.metrics import accuracy_score , confusion_matrix , precision_score , f1_score, recall_score
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

url ="https://raw.githubusercontent.com/shivang98/Social-Network-ads-Boost/master/Social_Network_Ads.csv"
social_data = pd.read_csv(url)
print(social_data.head(20))

x = social_data[["Age","EstimatedSalary"]]
y = social_data["Purchased"]

#imputing the mean to remove NaN values
imputer = SimpleImputer(strategy='mean')
x = imputer.fit_transform(x)

x_train ,x_test ,y_train ,y_test = train_test_split(x,y, test_size = 0.2,random_state = 42)

scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

model = LogisticRegression(random_state = 42)

model.fit(x_train , y_train)
y_pred = model.predict(x_test)

conf_matrix = confusion_matrix(y_test, y_pred)
TP, TN , FP ,FN = conf_matrix.ravel()

accuracy = accuracy_score(y_test , y_pred)
error_rate = 1-accuracy
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print("Confusion Matrix:")
print(conf_matrix)
print("\nTrue Positive (TP):", TP)
print("False Positive (FP):", FP)
print("True Negative (TN):", TN)
print("False Negative (FN):", FN)
print("\nAccuracy:", accuracy)
print("Error Rate:", error_rate)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

# Plot the decision boundary
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Age', y='EstimatedSalary', hue='Purchased', data=social_data, palette='viridis')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')

# Plot the decision boundary
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Age', y='EstimatedSalary', hue='Purchased', data=social_data, palette='viridis')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')


# Plotting decision boundary
h = 0.5
x_min, x_max = x[:, 0].min() - 1, x[:, 0].max() + 1
y_min, y_max = x[:, 1].min() - 1, x[:, 1].max() + 1

xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)

plt.contourf(xx, yy, Z, cmap=plt.cm.coolwarm, alpha=0.3)
plt.title('Logistic Regression Decision Boundary')
plt.show()



